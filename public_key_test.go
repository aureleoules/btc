package btc

import (
	"reflect"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetPublicKey(t *testing.T) {
	var wifArray = []struct {
		WIF     string
		Network *Network
		X       string
		Y       string
	}{
		// Main network
		{"5JKmGh5KasctVb3o9p1eNZmgqgRNvAUTmVBs9aca5VJHHMFtMgc", MainNetwork, "94199638460339516669064035806819509557845470234024708380991157490745625887461", "54083449022663392508147741242912037981561821775290570569793708283362887964722"},
		{"5JqLR1PX9UWPkiPus9ontEPXo4KitgoiYCkHaFoDh5hJdDJJmcK", MainNetwork, "42387995307237826434754787419007831111230874724789793343385733389797684851", "86169477900944296571822801798839818066696895173285295494704785443290890379942"},
		{"5K9LPKv2VsbmAMhcEiNQnU2bTiNavtap1Ex6EMN1MFkTRZHi26E", MainNetwork, "70067853651479995177693488201083171446230153301655041651406139402055394702562", "47025331434943430360016248296642421509393119020606367647692702178951082732050"},
		{"5KMWmt74aaabx8bxumCoXzniNwfdPTTP4y2SG8D31Mzt79FemR9", MainNetwork, "87290897931703691238679009992642490285289830965256510074892293515044125193378", "23757110026022741404723541138281280143080464763041281039544546403843659041132"},
		{"5JE6ctXTzE8JK5Qaw1FUtR9kNiYsyBicuwdR2jn982sfn9BL2Ku", MainNetwork, "69840781979325786272537167981560351894064674609263318363174807841966654370289", "82938824860119808593992611841822942122051714982437775837979360532170452176693"},
		{"5JhpbHXjDJTuPxeXs53FBY4Hd4oZoS1RboswXNn3udEG6XtTdA8", MainNetwork, "45413414859231125040966507612571354847318717731234298567687710512794184696980", "30507183370717390786906388992677235648543147292076448799316111210335435436895"},
		{"5K9uGdHuajFab23DZFCv3EBN2bRwkifZiZRNbUoUgyn9g8UFMTu", MainNetwork, "15629854871576648256898131577715412909723789349496211937454709073480709307694", "12232758451332534133404606413155186638903114511596549186569158525711025546290"},

		// Test network
		{"931krx7yFnVSoHb1JxeN1W2rrhWARbNfiK3BA3xVZZrfgALvkMy", TestNetwork, "2072779824030601892023602317971046922633137422006114995373969146147251245593", "111367008410412548832387998911870782212396716641541369710207726981765593914797"},
		{"91imyYBEzyfb2d45tX81JucjFsCvidtKYwxbZXP6f431rY1mV8E", TestNetwork, "30121757235740649182431506006991350951674725383220809513372811460437197416995", "84738295428427773812529924296411133738022697647327337499533401669839946252068"},
		{"923jG4W4c83BacqWFTLHYCwaRw2YRR9umK9ZeQ2CtJfRLZLC8k6", TestNetwork, "60165574869215030714643779658149154815116791033013263935610054722278933938133", "87696934251101765229319095715249798696879735187722831666281722138278655776088"},
		{"92Bsm5dR62dXoEeTVAD899EEAtKBQoBQ68BnX4GC98TWnnaTWT5", TestNetwork, "30076639271076814124993507619810328989372217750737486133968510005401479660755", "108059705823937390160193066577887038677675391102018634941729809480878672976199"},
		{"92iDRThnHRquXbFLgZVdYzFjVUYz8difQtwjeMRRULKNbxNWkKV", TestNetwork, "76057552513823893717230329928467558996877140952655788856592513853306373507844", "43475695055664201722853295107051704340310022312178129155081173673039676139404"},
	}

	for _, value := range wifArray {
		privateKey, err := PrivateFromWIF(value.WIF, value.Network)

		assert.Nil(t, err)

		publicKey, valid := privateKey.GetPublicKey()

		assert.Equal(t, true, valid)
		assert.Equal(t, true, reflect.DeepEqual(value.Network, publicKey.Network))
		assert.Equal(t, value.X, publicKey.X.String())
		assert.Equal(t, value.Y, publicKey.Y.String())
	}
}

func TestFormat(t *testing.T) {
	var wifArray = []struct {
		WIF             string
		Network         *Network
		UncompressedHex string
		CompressedHex   string
	}{
		// Main network
		{"5JKmGh5KasctVb3o9p1eNZmgqgRNvAUTmVBs9aca5VJHHMFtMgc", MainNetwork, "04D0431B1FB23BF0D4D9B95B26419CBA50409D0FA610E9274B2F418BDCA20D42E5779225B9A70BFC715149B73AE91BC31A22D1B123F4872C5F31864725A5A59832", "02D0431B1FB23BF0D4D9B95B26419CBA50409D0FA610E9274B2F418BDCA20D42E5"},

		{"5JqLR1PX9UWPkiPus9ontEPXo4KitgoiYCkHaFoDh5hJdDJJmcK", MainNetwork, "040017FDA2210BFCBCC11D7E8845883D8A5C60A72DE7EA840A4D20A9E92681F673BE823236512B1E28DA42AA7446C39EB70B562C24CC299F0978ECD7C8F37C22A6", "020017FDA2210BFCBCC11D7E8845883D8A5C60A72DE7EA840A4D20A9E92681F673"},

		{"5K9LPKv2VsbmAMhcEiNQnU2bTiNavtap1Ex6EMN1MFkTRZHi26E", MainNetwork, "049AE8FFF14B9C8379DB533015D01E33BC89B8EB8DB32993D8AE9BC332833AB4E267F764F5F7502D4B92AE79F4B2F4E7800BC3F438FDDF2757CB93519943BAEA12", "029AE8FFF14B9C8379DB533015D01E33BC89B8EB8DB32993D8AE9BC332833AB4E2"},

		{"5KMWmt74aaabx8bxumCoXzniNwfdPTTP4y2SG8D31Mzt79FemR9", MainNetwork, "04C0FCE5BB12B2409B9CF31507BBC6CAB82E8F2C8EBF4E099E285D9DDC3E00B4A234860C3A4F917A8F3F8B63D3F260F3BB6E0FED4B46C40B5479CE8AB2DD14896C", "02C0FCE5BB12B2409B9CF31507BBC6CAB82E8F2C8EBF4E099E285D9DDC3E00B4A2"},

		{"5JE6ctXTzE8JK5Qaw1FUtR9kNiYsyBicuwdR2jn982sfn9BL2Ku", MainNetwork, "049A687B54DD8733A2B69B7D044BD7A01ACEB8E9B8C1E2EE3A7334090219EE31F1B75DB61904F97FD0E0C689C1FFC0387B1EDD2E199448F7F4D41A2E1341730F35", "039A687B54DD8733A2B69B7D044BD7A01ACEB8E9B8C1E2EE3A7334090219EE31F1"},

		{"5JhpbHXjDJTuPxeXs53FBY4Hd4oZoS1RboswXNn3udEG6XtTdA8", MainNetwork, "04646714F9321FB41ECBAA175C63123D56E3DE3D4A918B630E1B72778DB57BC49443727431FCF6B88748976DAC81DC2585F8BFA4A52EBC7FD3AF1416580FCB335F", "03646714F9321FB41ECBAA175C63123D56E3DE3D4A918B630E1B72778DB57BC494"},

		{"5K9uGdHuajFab23DZFCv3EBN2bRwkifZiZRNbUoUgyn9g8UFMTu", MainNetwork, "04228E2F323D732B82315AE0DB2D040871B9E5B4BD6A21278C7FC8A9220F4BFD2E1B0B7EF4E024CFF10735275FC0BF987E21C69E9294E322FE4B3A2E3E47F5A432", "02228E2F323D732B82315AE0DB2D040871B9E5B4BD6A21278C7FC8A9220F4BFD2E"},

		// Test network
		{"931krx7yFnVSoHb1JxeN1W2rrhWARbNfiK3BA3xVZZrfgALvkMy", TestNetwork, "04049526DCB9206C71CFC81B94D6D8737C85D330A147C0D97A332E906B10ED5219F6377E35CBAC734CC328EC81272B7678E27CD02ECA9CC07032101199CB055DAD", "03049526DCB9206C71CFC81B94D6D8737C85D330A147C0D97A332E906B10ED5219"},

		{"91imyYBEzyfb2d45tX81JucjFsCvidtKYwxbZXP6f431rY1mV8E", TestNetwork, "0442984F78154E452C0A60D208A5B8D910EE3EBEFE7580FE1F967E633B295F6A23BB582CF204D801B0F3B8178577A96B4CFBD4E822A8A39E8E77483992DD0FFF24", "0242984F78154E452C0A60D208A5B8D910EE3EBEFE7580FE1F967E633B295F6A23"},

		{"923jG4W4c83BacqWFTLHYCwaRw2YRR9umK9ZeQ2CtJfRLZLC8k6", TestNetwork, "0485048233A536EDE62124BD18E3768E74083DFB0A400C8BCC7E442E74D2D03FD5C1E2B4AF34C798AD774A272230A79C6C3F8A39BC932A54AC7AAEE7CED2015558", "0285048233A536EDE62124BD18E3768E74083DFB0A400C8BCC7E442E74D2D03FD5"},

		{"92Bsm5dR62dXoEeTVAD899EEAtKBQoBQ68BnX4GC98TWnnaTWT5", TestNetwork, "04427EC649C34A1CB3E69B48C4238DAC32AFA5ABE6474A11B530DF204C8DF9C4D3EEE7A046D61279149C50926223863C6AF61805A7414572ADEB74A09189AA1947", "03427EC649C34A1CB3E69B48C4238DAC32AFA5ABE6474A11B530DF204C8DF9C4D3"},

		{"92iDRThnHRquXbFLgZVdYzFjVUYz8difQtwjeMRRULKNbxNWkKV", TestNetwork, "04A8270C97E7B2C17D83A90A51024E2D5BD7C3DE8D57ED75ABC473DB9EBB4D8B04601E5F130F0DC2B23FA2FF4BDC92D3FDEB61D9017C5F86A079F29E2CCF79678C", "02A8270C97E7B2C17D83A90A51024E2D5BD7C3DE8D57ED75ABC473DB9EBB4D8B04"},
	}

	for _, value := range wifArray {
		privateKey, err := PrivateFromWIF(value.WIF, value.Network)
		assert.Nil(t, err)

		publicKey, valid := privateKey.GetPublicKey()

		assert.Equal(t, true, valid)
		assert.Equal(t, true, reflect.DeepEqual(value.Network, publicKey.Network))
		assert.Equal(t, strings.ToLower(value.UncompressedHex), strings.ToLower(publicKey.Format(false)))
		assert.Equal(t, strings.ToLower(value.CompressedHex), strings.ToLower(publicKey.Format(true)))
	}
}

func TestAddress(t *testing.T) {
	var hexArray = []struct {
		UncompressedHex     string
		UncompressedAddress string
		CompressedAddress   string
		Network             *Network
	}{
		// Main network
		{"04D0431B1FB23BF0D4D9B95B26419CBA50409D0FA610E9274B2F418BDCA20D42E5779225B9A70BFC715149B73AE91BC31A22D1B123F4872C5F31864725A5A59832", "1LsYfWvKHvo1t6iDQQaauQi1sT5Hyt19ei", "1HLvTawtr94zmmY1Qd3LQ5uRiav3HZizTN", MainNetwork},

		{"040017FDA2210BFCBCC11D7E8845883D8A5C60A72DE7EA840A4D20A9E92681F673BE823236512B1E28DA42AA7446C39EB70B562C24CC299F0978ECD7C8F37C22A6", "1BBu2rgpgcqRhWg3E4zhLkYvjA5BGqT4Ue", "1C9HJdNdBPHu8ChhCZx4coCkY5bZYnUP2B", MainNetwork},

		{"049AE8FFF14B9C8379DB533015D01E33BC89B8EB8DB32993D8AE9BC332833AB4E267F764F5F7502D4B92AE79F4B2F4E7800BC3F438FDDF2757CB93519943BAEA12", "1ELom8Kh96zHGzhifVZEUqH6vLEEVNaW3S", "1Q8VC6bUb7uVQyE465SrAGYzshrLSb7Lr3", MainNetwork},

		{"04C0FCE5BB12B2409B9CF31507BBC6CAB82E8F2C8EBF4E099E285D9DDC3E00B4A234860C3A4F917A8F3F8B63D3F260F3BB6E0FED4B46C40B5479CE8AB2DD14896C", "1UHZkgAgTEakeA9ynuSbH36iEtgWLZHD6", "1Dzm3dZL3fU4vBMdfqC1gEKwsY5eDfVt5h", MainNetwork},

		{"049A687B54DD8733A2B69B7D044BD7A01ACEB8E9B8C1E2EE3A7334090219EE31F1B75DB61904F97FD0E0C689C1FFC0387B1EDD2E199448F7F4D41A2E1341730F35", "1JADLEivYdYt8VbXwVDnt93wUXvaDNqo4m", "1FJ47zupS7Y2fjjzZncjyKXW6R8bSNhdVf", MainNetwork},

		{"04646714F9321FB41ECBAA175C63123D56E3DE3D4A918B630E1B72778DB57BC49443727431FCF6B88748976DAC81DC2585F8BFA4A52EBC7FD3AF1416580FCB335F", "1CT3TdbhBrunthBsD1cMrVGjmFfcSxRqgR", "1Jfn6uidNPRcXtJTwt3hURD8EQX2zhjHsN", MainNetwork},

		{"04228E2F323D732B82315AE0DB2D040871B9E5B4BD6A21278C7FC8A9220F4BFD2E1B0B7EF4E024CFF10735275FC0BF987E21C69E9294E322FE4B3A2E3E47F5A432", "14Tro61Af74bXg2M9PrREEW133u32co4SD", "13VGjxi7TLQJgeqUc1eCbnnK4KqGTRA4fX", MainNetwork},

		// Test network
		{"04049526DCB9206C71CFC81B94D6D8737C85D330A147C0D97A332E906B10ED5219F6377E35CBAC734CC328EC81272B7678E27CD02ECA9CC07032101199CB055DAD", "myVJkazTp5wUFCsgiH8J9wc8M8KmmsAksy", "mzSuqD9ZcVHbs2K6oQYrzpwZnkzGL2VBPk", TestNetwork},

		{"0442984F78154E452C0A60D208A5B8D910EE3EBEFE7580FE1F967E633B295F6A23BB582CF204D801B0F3B8178577A96B4CFBD4E822A8A39E8E77483992DD0FFF24", "mx3Vej86kEFxWety1rHSqEgp4z2dcG7t1x", "n1cERpiyZWXBm5EMmf5W6hKte6UxhKwv5h", TestNetwork},

		{"0485048233A536EDE62124BD18E3768E74083DFB0A400C8BCC7E442E74D2D03FD5C1E2B4AF34C798AD774A272230A79C6C3F8A39BC932A54AC7AAEE7CED2015558", "mgZoigMygTyrnKjfx7eaqn4x4yTFxhAotD", "mgQCe7oLuqw3TMYY3XHwWmnb6KVSrYcFEk", TestNetwork},

		{"04427EC649C34A1CB3E69B48C4238DAC32AFA5ABE6474A11B530DF204C8DF9C4D3EEE7A046D61279149C50926223863C6AF61805A7414572ADEB74A09189AA1947", "n16p9hHMP149cWCbM5hprvSYfsxq85VJB9", "mgz9zTbaaxKdEPtWj7TGTx9zVw67QgMZFp", TestNetwork},

		{"04A8270C97E7B2C17D83A90A51024E2D5BD7C3DE8D57ED75ABC473DB9EBB4D8B04601E5F130F0DC2B23FA2FF4BDC92D3FDEB61D9017C5F86A079F29E2CCF79678C", "mfmce3TFnjpscw1rytvucWvJA9jurQENTY", "n3zg3YDjE1o2mvm82MXEngpHSZ7KrhcCZv", TestNetwork},
	}
	for _, value := range hexArray {
		publicKey, err := PublicFromHex(value.UncompressedHex, value.Network)
		assert.Nil(t, err)

		addressUncompressed, err := publicKey.Address(false)
		addressCompressed, err := publicKey.Address(true)

		assert.Nil(t, err)

		assert.Equal(t, strings.ToLower(value.UncompressedAddress), strings.ToLower(addressUncompressed))
		assert.Equal(t, strings.ToLower(value.CompressedAddress), strings.ToLower(addressCompressed))
	}
}

func TestPublicFromHex(t *testing.T) {
	var hexArray = []struct {
		UncompressedHex string
		CompressedHex   string
		Network         *Network
	}{
		// Main network
		{"04D0431B1FB23BF0D4D9B95B26419CBA50409D0FA610E9274B2F418BDCA20D42E5779225B9A70BFC715149B73AE91BC31A22D1B123F4872C5F31864725A5A59832", "02D0431B1FB23BF0D4D9B95B26419CBA50409D0FA610E9274B2F418BDCA20D42E5", MainNetwork},

		{"040017FDA2210BFCBCC11D7E8845883D8A5C60A72DE7EA840A4D20A9E92681F673BE823236512B1E28DA42AA7446C39EB70B562C24CC299F0978ECD7C8F37C22A6", "020017FDA2210BFCBCC11D7E8845883D8A5C60A72DE7EA840A4D20A9E92681F673", MainNetwork},

		{"049AE8FFF14B9C8379DB533015D01E33BC89B8EB8DB32993D8AE9BC332833AB4E267F764F5F7502D4B92AE79F4B2F4E7800BC3F438FDDF2757CB93519943BAEA12", "029AE8FFF14B9C8379DB533015D01E33BC89B8EB8DB32993D8AE9BC332833AB4E2", MainNetwork},

		{"04C0FCE5BB12B2409B9CF31507BBC6CAB82E8F2C8EBF4E099E285D9DDC3E00B4A234860C3A4F917A8F3F8B63D3F260F3BB6E0FED4B46C40B5479CE8AB2DD14896C", "02C0FCE5BB12B2409B9CF31507BBC6CAB82E8F2C8EBF4E099E285D9DDC3E00B4A2", MainNetwork},

		{"049A687B54DD8733A2B69B7D044BD7A01ACEB8E9B8C1E2EE3A7334090219EE31F1B75DB61904F97FD0E0C689C1FFC0387B1EDD2E199448F7F4D41A2E1341730F35", "039A687B54DD8733A2B69B7D044BD7A01ACEB8E9B8C1E2EE3A7334090219EE31F1", MainNetwork},

		{"04646714F9321FB41ECBAA175C63123D56E3DE3D4A918B630E1B72778DB57BC49443727431FCF6B88748976DAC81DC2585F8BFA4A52EBC7FD3AF1416580FCB335F", "03646714F9321FB41ECBAA175C63123D56E3DE3D4A918B630E1B72778DB57BC494", MainNetwork},

		{"04228E2F323D732B82315AE0DB2D040871B9E5B4BD6A21278C7FC8A9220F4BFD2E1B0B7EF4E024CFF10735275FC0BF987E21C69E9294E322FE4B3A2E3E47F5A432", "02228E2F323D732B82315AE0DB2D040871B9E5B4BD6A21278C7FC8A9220F4BFD2E", MainNetwork},

		// Test network
		{"04049526DCB9206C71CFC81B94D6D8737C85D330A147C0D97A332E906B10ED5219F6377E35CBAC734CC328EC81272B7678E27CD02ECA9CC07032101199CB055DAD", "03049526DCB9206C71CFC81B94D6D8737C85D330A147C0D97A332E906B10ED5219", TestNetwork},

		{"0442984F78154E452C0A60D208A5B8D910EE3EBEFE7580FE1F967E633B295F6A23BB582CF204D801B0F3B8178577A96B4CFBD4E822A8A39E8E77483992DD0FFF24", "0242984F78154E452C0A60D208A5B8D910EE3EBEFE7580FE1F967E633B295F6A23", TestNetwork},

		{"0485048233A536EDE62124BD18E3768E74083DFB0A400C8BCC7E442E74D2D03FD5C1E2B4AF34C798AD774A272230A79C6C3F8A39BC932A54AC7AAEE7CED2015558", "0285048233A536EDE62124BD18E3768E74083DFB0A400C8BCC7E442E74D2D03FD5", TestNetwork},

		{"04427EC649C34A1CB3E69B48C4238DAC32AFA5ABE6474A11B530DF204C8DF9C4D3EEE7A046D61279149C50926223863C6AF61805A7414572ADEB74A09189AA1947", "03427EC649C34A1CB3E69B48C4238DAC32AFA5ABE6474A11B530DF204C8DF9C4D3", TestNetwork},

		{"04A8270C97E7B2C17D83A90A51024E2D5BD7C3DE8D57ED75ABC473DB9EBB4D8B04601E5F130F0DC2B23FA2FF4BDC92D3FDEB61D9017C5F86A079F29E2CCF79678C", "02A8270C97E7B2C17D83A90A51024E2D5BD7C3DE8D57ED75ABC473DB9EBB4D8B04", TestNetwork},
	}
	for _, value := range hexArray {
		publicKey, err := PublicFromHex(value.UncompressedHex, value.Network)
		assert.Nil(t, err)
		assert.Equal(t, strings.ToLower(value.CompressedHex), strings.ToLower(publicKey.Format(true)))

		publicKey, err = PublicFromHex(value.CompressedHex, value.Network)
		assert.Nil(t, err)
		assert.Equal(t, strings.ToLower(value.UncompressedHex), strings.ToLower(publicKey.Format(false)))

	}
}

func TestAddPublicKeys(t *testing.T) {
	var hexArray = []struct {
		Hex1    string
		Hex2    string
		SumHex  string
		Network *Network
	}{
		{"04ada3afd4abf1447160dd0264c8897352366af84f0af5543b23943537008ddcee6e04a2fbbc89981d269d72fb0068770d82585e9a6eb4468fa06199c5bd6cb290", "0491cd3b69e53bac698430c93bb9b5c6602398edd6cc99f2e8bd7476866cce44c1c9381dd8ac11d19180b9263b319f6c5d1fef875b7fc99b9abe2f1843d87242ae", "04dbab0910d663d7dcfae8edcbd1fb8653a8943a25231175f7c1fa0318a9d332f035309f6456aa93a28839cec40549eca98d6efe1eca5feacfd186bbb252f260d4", MainNetwork},
		{"047bf58abc99b1159a7b4b55e3068116cfd04c2a6e0f42dd900f47219dd7cb4604ecba0ed576bdede045fd1818fe8b8793c32e4366503118f68a6705cc7e293c47", "0426b1cc4a5c36ff6f551e505a112685c5837269f3be5cbf9c0655267e8f5f7569a0323c70309140388c8949492d6397aaac10b6ae44134e7a6ef2303623330aae", "04caadd1f857753749ff00bd71de1ec9e7a7567a3b042f5f857a6318dfa472f0bf4391c47d018dac76f8908ef991dc38a8fc233455f6badf88e461d7a6984db248", MainNetwork},
		{"04b56bf199adf110f26229e6e9d385567fcb5309507e5eb7302799d9869a1d0306522c7fc8462db346f5c3654cd922691e9a4d95a13c1eeae9c3371bc4637df85e", "04c2bfb4d0c5d97adeb8523c6d96e2ebbac54fd79bc5675cf50ba555ef3255a797dee0bb8c94a25eb1568ea9d82f822986068118d9e1399803b0c1e20f4eecf7ef", "046a3fab18d34566e314e6a40df88a1c862026bc708ab97e88718e7e51b7509b72411033290d4c5890d13c3a1afb69811d5b0c410eaf64490c361b1386007ed484", MainNetwork},
		{"04cb4ceb1ea984915a2b59444404c936c968081a37ab38cd78bfee6af64f469229ddbb5e586356adabacf23b49133c63322397ee136945843fed97b856e8754311", "046defde1317b50283e13031924c8edddffdafb4ef7bf935030f036e55b13171d7f65b17699041bdc7c139f36f681a98812d050d5672c2816fea13b07240c86c29", "0479306b8d5ac4fc12623520e98e78bb1cbff41beb03ed2eb6fb1e8da15ddc57a57ce650586b95501b96c6c89588c7ae09d351da1e3dcd3593f3a2e85c04a3944f", MainNetwork},
		{"04c60e8720081b35e1a70ed52d38083c123a756692c9251d1f348066248dfc4d76cef315221feb982e04a6940957d9f2a10b6e135ddc08fb4b77ee495b98ae16e8", "04061e4f7d4bc0f961263309d79b3b62b21167953cbdc6709ac5622b4c3b283ef6647efc2e437c95fe716a9041c5b473ef6ab56769ac8a6e8691b4c42552ef026e", "04a2d4d93676510b5feec70315db5ad6116b4ccc3439869b9f0fc65b6f4ee82f6dd8d9b036cc4e4c7f22dafd692d482ef4ee46f2a6917e736fa126ebd443b5a2d9", MainNetwork},

		{"04ef0d93e3b811fd54eb1c1af06e523e336d031ccb5c34b083231ad2c91110a616e0c42997233a9fe831b0edf2ce2c8449b857359933e9e938f77a4bc81b195f37", "04a07c4339cae9f0fcec1815ce8cbecf6e66bd1b5d43fb6cc184b312b13781fc8fe8a6ba340744aaea03bdb1ebb955e8d0cd6469ad70e15350ff9d440e7fea412b", "0404b3069937637a60dd6636f8b61bf2a85758e1975c0bd1db2ad82864bc220fdc4bdb82d5015e71b5e35e915a193c6e3d5b64f8324ae0c4f36d7d565e90946a76", TestNetwork},
		{"04a869f852e3b8907efa06ae6ca4a503d559b9d7c823c723587f9b5d5d0e110f8c8ed6bcd746138b03877ebb8427aae85fd52e00ac0e8356d91862f221dfdf1c87", "04046a1fea7f8f6bc38c8acb9e68ca3c2b20e631d5be4bc5e5d4fe6f808532c2991879fa002367bce831e87b790939ac5a03aa5595ac2a6332d714c1baf7c9c10f", "04f5557b4319df2ffcf240d4872ee41398134a42cfad97896b4bea2ffba1c2cbb786ba8edbd92c5b8764b2e0baea95c7a222c0c9d2271194a607cdee13cd610e58", TestNetwork},
		{"0481aa135e18a01adfaf502c393e267454bbf38ccd982b2cc2574e56922dcb7964dce839e3852c03a66fb255f136418cd8f3316bd9039bb321a0ddd303401f3a99", "04733b2d2a076572a7a6deb1edba9b50dae312138a1e2f76a02b48ce45c9dcdb7f2bf37a96d9b49f1db2cce4c6782cd14903c73b2bceed3753e50dcccb987392f4", "04f66d1cf72b224790f897a256493639cf0d5adc969ad83695efb7d12e7b1cbc913ce4bfc3bd92d6d56c8a792e6f3bf53f31d430ef6c4266eb3ee5773fd4710a80", TestNetwork},
		{"045b182662b540b3917ba2ebd65c9beac01090114012a2bc0a4112cbe50a22fb0570a225a567bcb4b7e21e1e10ab229e40bd02e736e765ba18256fa61487389a24", "0434fdb23229f93d1c28b903ec3464d5ff54a9ea6d03183aabea21acae32da5871cbd358b0be6bca80327491848b54ac6fac5c128312d0766b9111e57b21ddb132", "04f782cd009951fb5012e0a3a228f9232fd9c64f21268864a07e01236619900fc2ecbea4f265dea13b2322a1576df7c33073a1e1e7b33d1c77066b72910b6a361c", TestNetwork},
		{"041dae5c6d4312dc9af1f1ef9b2fbaa05947b26ebcfe7954c6429e5022b62f355751d4e9dfd416bf07d07421bcf08df67ac2eb76782c5741772c60f1f30709b92e", "0489be0a42996579b04f56a477c43ec5012bbacd12cd42b5fb5913b54e43df9df9a2c369de3d1129f63468d80a14e4f33cd2c52809970062cf9f8636c2e6371f12", "04c6b63c1cb8e591cac964e71bbb224c3ddcf49093dbd879dae18f887d6f33ed8eeb502d1ece22f53233d1cfc9dcf1354959e86b652d4256e03ed88533d76ad8d8", TestNetwork},
	}
	for _, value := range hexArray {

		pub1, err := PublicFromHex(value.Hex1, value.Network)
		assert.Nil(t, err)
		pub2, err := PublicFromHex(value.Hex2, value.Network)
		assert.Nil(t, err)

		sum, _ := AddPublicKeys(pub1, pub2, false)

		assert.Equal(t, strings.ToLower(value.SumHex), strings.ToLower(sum.Format(false)))
	}

}
